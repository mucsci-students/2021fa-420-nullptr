UML++ serves as an editor for an implementation of a UML class diagram.

The program's command interface is operated by inputting numbers into the 
console that correspond to a given command. For example, to go through
operations for Class, input a 0 and press Enter to enter it.

UML++ has the following hierarchy for its command-line interface:

- [1] Class: Lists operations for modifying classes.
    - [1] Add: Prompts for a class name. If the class does not already exist
               and is valid, the class will be inserted into the diagram.
    - [2] Remove: Prompts for a class name. If the class exists, the class will
                  be removed from the UML class diagram.
    - [3] Rename: Prompts for a class name. If the class exists and the new 
                  name is valid, the class will have its name modified to the
                  new name prompted.
    - [4] Back: Returns back to the main set of commands.
    
- [2] Attribute: Lists operations for modifying attributes. UML++ supports two
                 types of attributes: fields and methods. Fields only have a
                 name and type, while methods can have parameters with their 
                 own types.
    - [1] Add: Prompts for a class which will hold the attribute, and then 
               ask for the type of attribute that will be inserted. If a 
               method is inserted, it will allow you to insert as many 
               parameters as you would like to it.
    - [2] Remove: Prompts for a class and an attribute. If the class 
                  exists alongside the attribute, the attribute will be 
                  removed.
    - [3] Change: Prompts for a class and an attribute. Allows you to change 
                  the name, type, and if the attribute is a method, modify 
                  the parameters that exist within the method. Parameter
                  modifications include adding, deleting, and replacing 
                  parameters.
    - [4] Back: Returns back to the main set of commands.
    
- [3] Relationship: Lists operations for modifying relationships.
    - [1] Add: Prompts for a source class and a destination class, alongside a
               type. If there is not already a relationship with this source
               destination combination and no relationship type rules are being
               broken, a new relationship will be made.
    - [2] Remove: Prompts for a source class and a destination class. If the 
                relationship exists, it will be removed.
    - [3] Modify Type: Prompts for a source class and a destination class,
                       alongside a new type. Changes the relationship to have 
                       the new type, given that this does not cause any errors.
    - [4] Back: Returns back to the main set of commands.
    
- [4] List: Lists operations for viewing information within the diagram.
    - [1] Class: Prompts for a class name. If the class exists, information 
                 about the class, its attributes, and its relationships will 
                 be displayed.
    - [2] Diagram: Displays all information for all classes, alongside their 
                   attributes and relationships.
    - [3] Back: Returns back to the main set of commands.
    
- [5] Save: Saves your UML diagram to a JSON file in the same directory as the
            executable.

- [6] Load: Prompts for a directory. If the directory exists, a UML diagram 
            made previously by this program will be loaded for modification.

- [7] Help: Loads this help file into the console.

- [8] Exit: Exits the program. If the UML class diagram is not saved 
            beforehand, data will be lost.